generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Profile {
  firstName String
  lastName  String
}

enum LessonType {
  UKRAINIAIN
  MATH
  ENGLISH
  OTHER
}

enum Role {
  teacher
  student
}

// superadmin
// model User {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   profile   Profile
//   email     String   @unique
//   password  String
// }

model Teacher {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile
  email     String   @unique
  password  String
  lessons   Lesson[] @relation("MyLessons")
  marks     Mark[]   @relation("TeacherMarks")
  type      Role     @default(teacher)
}

model Lesson {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  type        LessonType
  topic       String
  description String?
  startTime   String
  endTime     String
  classroom   Classroom  @relation(references: [id], fields: [classroomId], "ClassroomLessons")
  classroomId String     @db.ObjectId
  location    String?
  teacher     Teacher    @relation(references: [id], fields: [teacherId], "MyLessons")
  teacherId   String     @db.ObjectId
  marks       Mark[]     @relation("LessonMarks")
}

model Classroom {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  students  Student[] @relation("ClassroomStudents")
  lessons   Lesson[]  @relation("ClassroomLessons")
}

model Student {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  profile     Profile
  email       String    @unique
  password    String
  classroom   Classroom @relation(references: [id], fields: [classroomId], "ClassroomStudents")
  classroomId String    @db.ObjectId
  marks       Mark[]    @relation("StudentMarks")
  type        Role      @default(student)
}

model Mark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     Int
  // todo -validate
  teacher   Teacher  @relation(references: [id], fields: [teacherId], "TeacherMarks")
  teacherId String   @db.ObjectId
  student   Student  @relation(references: [id], fields: [studentId], "StudentMarks")
  studentId String   @db.ObjectId
  lesson    Lesson   @relation(fields: [lessonId], references: [id], "LessonMarks")
  lessonId  String   @db.ObjectId
}
